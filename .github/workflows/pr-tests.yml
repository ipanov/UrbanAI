name: Pull Request Testing

on:
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened]

env:
  DOTNET_VERSION: '9.0.x'
  NODE_VERSION: '20'

jobs:
  pr-gate-tests:
    name: PR Gate - Comprehensive Testing
    runs-on: ubuntu-latest
    timeout-minutes: 45
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: urbanai_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for change detection

    # Change detection for smart testing
    - name: Detect changes
      id: changes
      uses: dorny/paths-filter@v2
      with:
        filters: |
          backend:
            - 'src/UrbanAI.API/**'
            - 'src/UrbanAI.Application/**'
            - 'src/UrbanAI.Domain/**'
            - 'src/UrbanAI.Infrastructure/**'
            - 'src/UrbanAI.Functions/**'
            - 'tests/**'
            - '*.sln'
            - '**/*.csproj'
          frontend:
            - 'src/UrbanAI.Frontend/**'
            - '!src/UrbanAI.Frontend/tests/e2e/**'
          e2e-tests:
            - 'src/UrbanAI.Frontend/tests/e2e/**'
          config:
            - '.github/workflows/**'
            - '*.md'
            - 'coverlet.runsettings'
            - 'integration-coverage.runsettings'

    # Backend testing
    - name: Setup .NET
      if: steps.changes.outputs.backend == 'true'
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Restore and build .NET solution
      if: steps.changes.outputs.backend == 'true'
      run: |
        dotnet restore UrbanAI.sln
        dotnet build UrbanAI.sln --configuration Release --no-restore
    
    - name: Run backend tests with coverage
      if: steps.changes.outputs.backend == 'true'
      env:
        ASPNETCORE_ENVIRONMENT: Testing
        ConnectionStrings__DefaultConnection: Host=localhost;Port=5432;Database=urbanai_test;Username=postgres;Password=postgres
      run: |
        echo "🧪 Running backend unit tests..."
        dotnet test tests/UrbanAI.Domain.Tests/ --configuration Release --no-build --collect:"XPlat Code Coverage" --settings coverlet.runsettings --logger trx
        dotnet test tests/UrbanAI.Application.Tests/ --configuration Release --no-build --collect:"XPlat Code Coverage" --settings coverlet.runsettings --logger trx
        dotnet test tests/UrbanAI.Infrastructure.Tests/ --configuration Release --no-build --collect:"XPlat Code Coverage" --settings coverlet.runsettings --logger trx
        dotnet test tests/UrbanAI.API.Tests/ --configuration Release --no-build --collect:"XPlat Code Coverage" --settings coverlet.runsettings --logger trx
        
        echo "🔗 Running integration tests..."
        dotnet test tests/UrbanAI.API.IntegrationTests/ --configuration Release --no-build --collect:"XPlat Code Coverage" --settings integration-coverage.runsettings --logger trx

    # Frontend testing
    - name: Setup Node.js
      if: steps.changes.outputs.frontend == 'true' || steps.changes.outputs.e2e-tests == 'true'
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: src/UrbanAI.Frontend/package-lock.json
    
    - name: Install frontend dependencies
      if: steps.changes.outputs.frontend == 'true' || steps.changes.outputs.e2e-tests == 'true'
      working-directory: src/UrbanAI.Frontend
      run: npm ci
    
    - name: Frontend quality checks
      if: steps.changes.outputs.frontend == 'true'
      working-directory: src/UrbanAI.Frontend
      run: |
        echo "🔍 TypeScript compilation check..."
        npm run type-check
        
        echo "📏 ESLint code quality check..."
        npm run lint
        
        echo "🧪 Frontend unit tests with coverage..."
        npm run test:coverage
    
    # E2E testing (always run for PRs to main, or when frontend/E2E changes detected)
    - name: Setup E2E testing environment
      if: github.base_ref == 'main' || steps.changes.outputs.frontend == 'true' || steps.changes.outputs.e2e-tests == 'true'
      working-directory: src/UrbanAI.Frontend
      run: |
        echo "🎭 Installing Playwright browsers..."
        npx playwright install --with-deps
    
    - name: Run E2E tests
      if: github.base_ref == 'main' || steps.changes.outputs.frontend == 'true' || steps.changes.outputs.e2e-tests == 'true'
      working-directory: src/UrbanAI.Frontend
      run: |
        echo "🚀 Running comprehensive E2E test suite..."
        npm run test:e2e:ci
      env:
        CI: true

    # Build verification
    - name: Build frontend for deployment verification
      if: steps.changes.outputs.frontend == 'true'
      working-directory: src/UrbanAI.Frontend
      run: |
        echo "🏗️ Building frontend for production..."
        npm run build

    # Upload artifacts for debugging
    - name: Upload E2E test results
      if: (github.base_ref == 'main' || steps.changes.outputs.frontend == 'true' || steps.changes.outputs.e2e-tests == 'true') && always()
      uses: actions/upload-artifact@v4
      with:
        name: playwright-report-pr-${{ github.event.number }}
        path: src/UrbanAI.Frontend/playwright-report/
        retention-days: 14

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-pr-${{ github.event.number }}
        path: TestResults/
        retention-days: 14

    # PR status comment
    - name: Comment PR results
      if: always()
      uses: actions/github-script@v6
      with:
        script: |
          const results = {
            backend: '${{ steps.changes.outputs.backend }}' === 'true',
            frontend: '${{ steps.changes.outputs.frontend }}' === 'true',
            e2e: '${{ github.base_ref == 'main' || steps.changes.outputs.frontend == 'true' || steps.changes.outputs.e2e-tests == 'true' }}'
          };
          
          const status = '${{ job.status }}';
          const emoji = status === 'success' ? '✅' : '❌';
          
          let comment = `${emoji} **PR Testing Results**\n\n`;
          comment += `| Test Category | Executed | Status |\n`;
          comment += `|---------------|----------|--------|\n`;
          comment += `| Backend Tests | ${results.backend ? '✅' : '⏭️'} | ${results.backend ? status : 'Skipped'} |\n`;
          comment += `| Frontend Tests | ${results.frontend ? '✅' : '⏭️'} | ${results.frontend ? status : 'Skipped'} |\n`;
          comment += `| E2E Tests | ${results.e2e ? '✅' : '⏭️'} | ${results.e2e ? status : 'Skipped'} |\n\n`;
          
          if (status === 'success') {
            comment += `🚢 **Ready for merge to main!** All required tests have passed.\n`;
          } else {
            comment += `🚫 **Not ready for merge.** Please fix the failing tests before merging.\n`;
          }
          
          comment += `\n[View detailed results](${context.payload.repository.html_url}/actions/runs/${context.runId})`;
          
          // Find existing comment and update it, or create new one
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && comment.body.includes('PR Testing Results')
          );
          
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: comment
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });
          }