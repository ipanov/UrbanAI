name: UrbanAI CI/CD

on:
  push:
    branches: [main]

env:
  RESOURCE_TOKEN: ${{ secrets.RESOURCE_TOKEN }}
  SUBSCRIPTION_ID: "184eb9b3-615b-424a-9270-8703af01c717"
  PRODUCTION_DOMAIN: "urbanai.site"

jobs:
  build-test:
    runs-on: windows-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # Backend build
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'
    
    - name: Build solution
      run: dotnet build UrbanAI.sln --configuration Release
      
    - name: Run tests
      run: dotnet test --configuration Release --settings coverlet.runsettings --collect:"XPlat Code Coverage"
      
    - name: Install ReportGenerator (repo-local)
      shell: pwsh
      run: |
        # Install ReportGenerator to a repo-local tools directory to avoid requiring global tools
        dotnet tool install --tool-path tools dotnet-reportgenerator-globaltool
        # add the repo-local tools folder to PATH for the remainder of the job
        echo "$env:GITHUB_WORKSPACE\tools" >> $env:GITHUB_PATH

    - name: Find coverage file
      run: |
        # Debug: List all XML files in the repository
        Write-Host "Searching for all XML files..."
        Get-ChildItem -Path "." -Filter "*.xml" -Recurse | ForEach-Object { Write-Host "Found: $($_.FullName)" }
        
        # Find the coverage file in common locations
        Write-Host "Searching for coverage files..."
        $coverageFile = $null
        
        # Try different search patterns
        $coverageFile = Get-ChildItem -Path "." -Filter "*coverage*.xml" -Recurse | Select-Object -First 1
        if (-not $coverageFile) {
            $coverageFile = Get-ChildItem -Path "." -Filter "*.xml" -Recurse | Where-Object { $_.Name -like "*coverage*" } | Select-Object -First 1
        }
        if (-not $coverageFile) {
            $coverageFile = Get-ChildItem -Path "TestResults" -Filter "*.xml" -Recurse | Select-Object -First 1
        }
        if (-not $coverageFile) {
            $coverageFile = Get-ChildItem -Path "tests" -Filter "*.xml" -Recurse | Select-Object -First 1
        }
        
        if ($coverageFile) {
            Write-Host "Found coverage file: $($coverageFile.FullName)"
            # Copy it to the expected location
            Copy-Item -Path $coverageFile.FullName -Destination "coverage.cobertura.xml"
            Write-Host "Copied coverage file to coverage.cobertura.xml"
        } else {
            Write-Error "No coverage file found in any location"
            Write-Host "Please ensure tests are run with coverage collection"
            exit 1
        }
    - name: Check coverage
      run: |
        # Coverage verification script
        ./.github/scripts/check-coverage.ps1

    - name: Upload coverage report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage-report

    - name: Upload TestResults
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: TestResults

    # Frontend build
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'
        
    - name: Install frontend dependencies
      working-directory: src/UrbanAI.Frontend
      run: npm install
      
    - name: Build frontend
      working-directory: src/UrbanAI.Frontend
      run: npm run build

  deploy-staging:
    needs: build-test
    if: github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    steps:
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        subscription-id: ${{ env.SUBSCRIPTION_ID }}

    - name: Deploy infrastructure
      run: azd up -e staging --no-prompt

    - name: Deploy API
      uses: Azure/functions-action@v1
      with:
        app-name: urbanai-api-staging-${{ env.RESOURCE_TOKEN }}
        package: src/UrbanAI.API

    - name: Deploy Frontend
      run: |
        az storage blob upload-batch \
          --account-name urbanaiweb${{ env.RESOURCE_TOKEN }} \
          -s src/UrbanAI.Frontend/dist \
          -d '$web' \
          --overwrite

  deploy-production:
    needs: build-test
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        subscription-id: ${{ env.SUBSCRIPTION_ID }}

    - name: Deploy infrastructure
      run: azd up -e production --no-prompt

    - name: Deploy API
      uses: Azure/functions-action@v1
      with:
        app-name: urbanai-api-production-${{ env.RESOURCE_TOKEN }}
        package: src/UrbanAI.API

    - name: Deploy Frontend
      run: |
        az storage blob upload-batch \
          --account-name urbanaiweb${{ env.RESOURCE_TOKEN }} \
          -s src/UrbanAI.Frontend/dist \
          -d '$web' \
          --overwrite
        az storage account update \
          --name urbanaiweb${{ env.RESOURCE_TOKEN }} \
          --custom-domain ${{ env.PRODUCTION_DOMAIN }}

  security-scan:
    needs: build-test
    runs-on: ubuntu-latest
    steps:
    - name: OWASP ZAP Scan
      uses: zaproxy/action-full-scan@v0.6.0
      with:
        target: 'https://staging.urbanai.site'

  report-failure:
    needs: build-test
    if: ${{ needs.build-test.result == 'failure' }}
    runs-on: ubuntu-latest
    steps:
    - name: Create GitHub Issue for CI Failure and dispatch event
      uses: actions/github-script@v6
      with:
        script: |
          const issueTitle = `[CI FAILURE] Build failed on ${process.env.GITHUB_REF} â€” run ${process.env.GITHUB_RUN_ID}`;
          const body = `The build/test job failed.\n\nRun: ${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID}\n\nArtifacts (if available): coverage-report, test-results\n\nPlease triage.`;
          // Create the issue
          const created = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: issueTitle,
            body: body,
            labels: ['ci-failure','urgent'],
            assignees: [context.repo.owner]
          });

          // Dispatch a repository event so the listener workflow can react in real-time
          await github.rest.repos.createDispatch({
            owner: context.repo.owner,
            repo: context.repo.repo,
            event_type: 'ci_failure_report',
            client_payload: {
              run_id: process.env.GITHUB_RUN_ID,
              run_url: `${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID}`,
              issue_number: created.data.number,
              issue_url: created.data.html_url,
              branch: process.env.GITHUB_REF
            }
          });

          core.setOutput('issue_number', created.data.number);
