name: Claude CI Fixer

on:
  issue_comment:
    types: [created]
  issues:
    types: [opened, assigned]

permissions:
  contents: write
  pull-requests: write
  issues: write
  actions: read
  id-token: write

jobs:
  claude-fix:
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'issues' && contains(github.event.issue.labels.*.name, 'ci-failure'))
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Parse CI failure details
        id: parse
        run: |
          issue_title="${{ github.event.issue.title }}"
          issue_body="${{ github.event.issue.body }}"
          
          # Extract run ID from title or body
          run_id=$(echo "$issue_title$issue_body" | grep -o 'Run [0-9]*' | grep -o '[0-9]*' | head -1 || echo "")
          echo "run_id=$run_id" >> $GITHUB_OUTPUT
          
          # Extract failed components
          failed_jobs=$(echo "$issue_title" | sed 's/.*: \(.*\) - Run.*/\1/' | head -1 || echo "Unknown")
          echo "failed_jobs=$failed_jobs" >> $GITHUB_OUTPUT
          
          echo "issue_number=${{ github.event.issue.number }}" >> $GITHUB_OUTPUT

      - name: Create Claude intervention comment
        uses: actions/github-script@v7
        with:
          script: |
            const runId = '${{ steps.parse.outputs.run_id }}';
            const failedJobs = '${{ steps.parse.outputs.failed_jobs }}';
            const issueNumber = ${{ steps.parse.outputs.issue_number }};
            
            // Get workflow run details if available
            let runDetails = '';
            if (runId) {
              try {
                const run = await github.rest.actions.getWorkflowRun({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  run_id: runId
                });
                runDetails = `
            **CI Run Details:**
            - Status: ${run.data.conclusion}
            - Branch: ${run.data.head_branch}
            - Commit: ${run.data.head_sha.substring(0, 8)}
            - Triggered: ${new Date(run.data.created_at).toLocaleString()}
            - [View Run](${run.data.html_url})
            `;
              } catch (error) {
                runDetails = `\n**CI Run ID:** ${runId} (details unavailable)\n`;
              }
            }
            
            const comment = `## 🤖 Claude Code Auto-Fix Activated
            
            I've detected a CI failure that needs attention. Let me analyze and fix this issue.
            
            **Failed Components:** ${failedJobs}
            ${runDetails}
            
            ### Analysis Plan:
            1. 🔍 Download and analyze CI logs
            2. 🧪 Identify specific test/build failures  
            3. 🛠️ Implement targeted fixes
            4. ✅ Verify fixes locally
            5. 🚀 Push fixes and monitor CI
            
            **@claude please analyze the CI failure in this issue and implement fixes to resolve the build failures.**
            
            ---
            *Automated analysis request - Claude Code will now work on this issue*`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              body: comment
            });

      - name: Set up analysis environment
        if: steps.parse.outputs.run_id != ''
        run: |
          # Create analysis directory
          mkdir -p ./ci-analysis
          
          # Download logs if possible (requires gh CLI)
          if command -v gh >/dev/null 2>&1; then
            echo "Downloading CI logs for analysis..."
            gh run download ${{ steps.parse.outputs.run_id }} --log --dir ./ci-analysis/logs || echo "Failed to download logs"
          fi
          
          # Create failure context for Claude
          cat > ./ci-analysis/failure-context.md << EOF
          # CI Failure Context - Issue #${{ steps.parse.outputs.issue_number }}
          
          **Run ID:** ${{ steps.parse.outputs.run_id }}
          **Failed Jobs:** ${{ steps.parse.outputs.failed_jobs }}
          **Issue:** https://github.com/${{ github.repository }}/issues/${{ steps.parse.outputs.issue_number }}
          **Repository:** ${{ github.repository }}
          **Branch:** develop
          
          ## Next Steps for Claude:
          1. Analyze the specific failure logs in ci-analysis/logs/
          2. Identify root cause of the failures
          3. Implement targeted fixes for the issues
          4. Test fixes locally before pushing
          5. Update this issue with progress and results
          
          ## Analysis Ready
          This context file provides Claude Code with the necessary information to begin automated CI failure resolution.
          EOF
          
          echo "Analysis environment prepared for Claude Code intervention"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Trigger manual Claude notification
        uses: actions/github-script@v7  
        with:
          script: |
            // Add a helpful comment for manual Claude usage
            const comment = `## 🎯 Ready for Manual Claude Code Intervention
            
            The CI failure analysis environment has been prepared. To continue:
            
            ### Option 1: Local Claude Code
            1. Run Claude Code in this repository locally
            2. Reference this issue: "Fix CI failures in issue #${{ steps.parse.outputs.issue_number }}"
            3. Claude will find the analysis context in \`ci-analysis/failure-context.md\`
            
            ### Option 2: Command Line
            \`\`\`bash
            # In your local repository
            claude --issue ${{ steps.parse.outputs.issue_number }} --fix-ci
            \`\`\`
            
            **Analysis Context:** Available in \`ci-analysis/\` directory
            **Failed Components:** ${{ steps.parse.outputs.failed_jobs }}
            **Run ID:** ${{ steps.parse.outputs.run_id }}
            
            Claude Code will automatically analyze the logs and implement fixes.`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ steps.parse.outputs.issue_number }},
              body: comment
            });