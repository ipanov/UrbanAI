name: CI Failure Listener

on:
  repository_dispatch:

jobs:
  write-memory-and-branch:
    if: ${{ github.event.action == '' || always() }}
    runs-on: ubuntu-latest
    steps:
      - name: Check event type
        run: |
          echo "Event type: $GITHUB_EVENT_NAME"
          echo "Client payload keys: $(jq -r 'keys|@csv' < $GITHUB_EVENT_PATH || echo 'none')"
          echo "Payload:"
          jq '.' < $GITHUB_EVENT_PATH

      - name: Ensure payload is ci_failure_report
        id: check
        run: |
          event_type="${{ github.event_name }}"
          # For repository_dispatch, the event_type is available as github.event.action? Use client_payload check
          payload_event=$(jq -r '.client_payload | keys? | @json' < $GITHUB_EVENT_PATH || echo "")
          run_id=$(jq -r '.client_payload.run_id // empty' < $GITHUB_EVENT_PATH)
          if [ -z "$run_id" ]; then
            echo "No run_id in client_payload, skipping."
            exit 78
          fi
          echo "Found run_id: $run_id"
          echo "::set-output name=run_id::$run_id"
          issue_number=$(jq -r '.client_payload.issue_number // empty' < $GITHUB_EVENT_PATH)
          echo "::set-output name=issue_number::$issue_number"
          issue_url=$(jq -r '.client_payload.issue_url // empty' < $GITHUB_EVENT_PATH)
          echo "::set-output name=issue_url::$issue_url"
          run_url=$(jq -r '.client_payload.run_url // empty' < $GITHUB_EVENT_PATH)
          echo "::set-output name=run_url::$run_url"
          branch=$(jq -r '.client_payload.branch // empty' < $GITHUB_EVENT_PATH)
          echo "::set-output name=branch::$branch"

      - name: Checkout default branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create memory-bank directory
        run: |
          mkdir -p memory-bank

      - name: Write activeContext.md
        run: |
          run_id="${{ steps.check.outputs.run_id }}"
          issue_number="${{ steps.check.outputs.issue_number }}"
          issue_url="${{ steps.check.outputs.issue_url }}"
          run_url="${{ steps.check.outputs.run_url }}"
          branch="${{ steps.check.outputs.branch }}"
          file="memory-bank/activeContext.md"
          # Build the activeContext.md safely using echo lines to avoid YAML/heredoc parsing issues
          echo "# CI Failure Active Context" > "$file"
          echo "" >> "$file"
          echo "Generated: $(date -u +%Y-%m-%dT%H:%M:%SZ)" >> "$file"
          echo "" >> "$file"
          echo "- Repository: $GITHUB_REPOSITORY" >> "$file"
          echo "- Run ID: $run_id" >> "$file"
          echo "- Run URL: $run_url" >> "$file"
          echo "- Branch: $branch" >> "$file"
          echo "" >> "$file"
          if [ -n "$issue_number" ]; then
            echo "- Issue: #$issue_number $issue_url" >> "$file"
          else
            echo "- Issue: " >> "$file"
          fi
          echo "" >> "$file"
          echo "Notes:" >> "$file"
          echo "- This file was created by the CI failure listener workflow in response to a repository_dispatch event (ci_failure_report)." >> "$file"
          echo "- It contains the minimal context for the Cline assistant to create a new task and begin remediation." >> "$file"
          echo "" >> "$file"
          echo "Suggested next steps:" >> "$file"
          echo "1. Retrieve failing job logs and artifacts from the workflow run." >> "$file"
          echo "2. Post a short summary into the issue (if not already present)." >> "$file"
          echo "3. Create a new task in Cline using the contents of this file and the logs." >> "$file"
          echo "4. Iterate fixes until the workflow run succeeds." >> "$file"
          echo "Wrote $file"
      - name: Commit to ci-failure-reports branch
        env:
          BRANCH_NAME: ci-failure-reports
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          # Create or update branch
          if git show-ref --verify --quiet refs/heads/$BRANCH_NAME; then
            git checkout $BRANCH_NAME
          else
            git checkout -b $BRANCH_NAME
          fi
          git add memory-bank/activeContext.md
          # commit only if changes exist
          if git diff --cached --quiet; then
            echo "No changes to commit"
          else
            git commit -m "chore(ci): add active CI failure context for run ${{ steps.check.outputs.run_id }} (issue ${{ steps.check.outputs.issue_number }})"
            git push --set-upstream origin $BRANCH_NAME
          fi

      - name: Create repository dispatch for Claude Code (optional notification)
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            // Notify repository listeners (optional) that activeContext.md was created/updated
            await github.rest.repos.createDispatchEvent({
              owner: context.repo.owner,
              repo: context.repo.repo,
              event_type: 'ci_failure_context_ready',
              client_payload: {
                branch: 'ci-failure-reports',
                path: 'memory-bank/activeContext.md',
                issue_number: '${{ steps.check.outputs.issue_number }}',
                run_id: '${{ steps.check.outputs.run_id }}'
              }
            });
